This file is the result of mixing deployment procedures between Miguel Grinberg's Flask Mega Tutorial
and Digital Oceans deployment tutorial.

In particular it takes Miguel's configuration for nginx and mixes it with Digital Ocean's 
configuration for Gunicorn.

Digital Ocean tutorial:
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04



IMPORTANT NOTE!!!!

PERMISSIONS: You must set permissions correctly on your host in order for nginx to make requests to the application instance correctly. 
SUPERVISOR: I have not gotten supervisor to work with this configuration yet. I suspect that it is an issue with the gunicorn command in the file, but I'm not sure yet. 


location socket
http://unix:/home/ubuntu/flask-microblog/microblog.sock

full command to start gunicorn process:
/home/ubuntu/.local/share/virtualenvs/flask-microblog-kLGpzgq7/bin/gunicorn --preload --workers 4 --bind unix:microblog.sock -m 007 microblog:app


FILENAME: /etc/systemd/system/microblog.service
COMMAND TO START SERVICE: sudo systemctl [start/stop/status/enable/disable] microblog


comments: I used the --preload flag on the gunicorn command in ExecStart.
This gave me more information when encountering errors.

[Unit]
Description=Gunicorn instance serving MICROBLOG
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/flask-microblog
Environment="PATH=/home/ubuntu/.local/share/virtualenvs/flask-microblog-kLGpzgq7/bin; FLASK_APP=microblog.py"
ExecStart=/home/ubuntu/.local/share/virtualenvs/flask-microblog-kLGpzgq7/bin/gunicorn --preload --workers 4 --bind unix:microblog.sock -m 007 microblog:app

[Install]
WantedBy=multi-user.target


FILENAME: /etc/nginx/sites-available/microblog
Command to reload nginx after editing this file: sudo service [start/stop/enable/etc] nginx
# previous paramater left out: include proxy_params;

server {
    # listen on port 80 (http)
    listen 80;
    server_name _;
    location / {
        # redirect any requests to the same URL but on https
        return 301 https://$host$request_uri;
    }
}
server {
    # listen on port 443 (https)
    listen 443 ssl;
    server_name _;

    # location of the self-signed SSL certificate
    ssl_certificate /home/ubuntu/flask-microblog/certs/cert.pem;
    ssl_certificate_key /home/ubuntu/flask-microblog/certs/key.pem;

    # write access and error logs to /var/log
    access_log /var/log/microblog_access.log;
    error_log /var/log/microblog_error.log;

    location / {
        # forward application requests to the gunicorn server
        proxy_pass http://unix:/home/ubuntu/flask-microblog/microblog.sock;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
        # handle static files directly, without forwarding to the application
        alias /home/ubuntu/flask-microblog/app/static;
        expires 30d;
    }
}

